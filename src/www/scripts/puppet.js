// Generated by CoffeeScript 1.3.3
(function() {
  var MotionSocket, PuppetApplication, PuppetHead;

  PuppetApplication = (function() {

    function PuppetApplication() {
      var _this = this;
      this.renderPane = $('#primary');
      this.head = new PuppetHead(this.renderPane);
      this.lastQuaternion = [0, 0, 0, 1];
      this.enabled = false;
      this.socket = new MotionSocket('ws://' + document.location.host + '/motion');
      this.socket.bind('motion', this.updateQuaternion.bind(this));
      $("#reset-ahrs-btn").click(function() {
        return _this.socket.resetAHRS();
      });
      this.socket.setPingCallback(function(ms) {
        return $('#latency-indicator').html("Ping " + ms + "ms");
      });
    }

    PuppetApplication.prototype.updateQuaternion = function(e) {
      return this.lastQuaternion = e.Data.quaternion;
    };

    PuppetApplication.prototype.start = function() {
      this.enabled = true;
      this.socket.subscribeMotion();
      return this.render();
    };

    PuppetApplication.prototype.stop = function() {
      this.socket.unsubscribeMotion();
      return this.enabled = false;
    };

    PuppetApplication.prototype.render = function() {
      var _ref;
      if (this.enabled) {
        requestAnimationFrame(this.render.bind(this));
        (_ref = this.head).updateQuaternion.apply(_ref, this.lastQuaternion);
        return this.head.render();
      }
    };

    return PuppetApplication;

  })();

  MotionSocket = (function() {

    function MotionSocket(hostString) {
      var _this = this;
      this.ws = window['MozWebSocket'] ? new MozWebSocket(hostString) : new WebSocket(hostString);
      $(this.ws).bind('message', this.onMessage.bind(this));
      $(window).unload(this.close.bind(this));
      this.handlers = {};
      this.pingLatency = 0;
      this.pingInterval = setInterval(function() {
        return _this.send('ping', {
          t: new Date().getTime()
        });
      }, 520);
      this.bind('pong', function(e) {
        var tEnd, tStart;
        tStart = parseInt(e.Data.t);
        tEnd = new Date().getTime();
        _this.pingLatency = tEnd - tStart;
        if (typeof _this.pingIntervalUpdateCallback === "function") {
          _this.pingIntervalUpdateCallback(_this.pingLatency);
        }
        return console.log("Latency (ms):", _this.pingLatency);
      });
    }

    MotionSocket.prototype.bind = function(evt, f) {
      return this.handlers[evt] = f;
    };

    MotionSocket.prototype.onMessage = function(e) {
      var h, m;
      m = JSON.parse(e.originalEvent.data);
      h = this.handlers[m.Type];
      return h != null ? h.call(this, m) : void 0;
    };

    MotionSocket.prototype.send = function(type, data) {
      var m;
      m = {
        'Type': type
      };
      if (data) {
        m['Data'] = data;
      }
      return this.ws.send(JSON.stringify(m));
    };

    MotionSocket.prototype.close = function() {
      this.unsubscribeMotion();
      clearInterval(this.pingInterval);
      return this.ws.close();
    };

    MotionSocket.prototype.resetAHRS = function() {
      return this.send('reset_ahrs');
    };

    MotionSocket.prototype.setFPS = function(fps) {
      return this.send('set_fps', fps);
    };

    MotionSocket.prototype.subscribeMotion = function(fps) {
      return this.send('subscribe_motion');
    };

    MotionSocket.prototype.unsubscribeMotion = function() {
      return this.send('unsubscribe_motion');
    };

    MotionSocket.prototype.setPingCallback = function(f) {
      return this.pingIntervalUpdateCallback = f;
    };

    return MotionSocket;

  })();

  PuppetHead = (function() {

    function PuppetHead(target) {
      this.target = target;
      this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 10000);
      this.camera.position.z = 1000;
      this.scene = new THREE.Scene();
      this.geometry = new THREE.SphereGeometry(200, 30, 30);
      this.material = new THREE.MeshBasicMaterial({
        color: 0xff0000,
        wireframe: true
      });
      this.mesh = new THREE.Mesh(this.geometry, this.material);
      this.mesh.useQuaternion = true;
      this.scene.add(this.mesh);
      this.renderer = new THREE.CanvasRenderer();
      this.renderer.setSize(this.target.innerWidth(), this.target.innerHeight());
      this.target.append(this.renderer.domElement);
    }

    PuppetHead.prototype.updateQuaternion = function(x, y, z, w) {
      return this.mesh.quaternion.set(x, y, z, w);
    };

    PuppetHead.prototype.render = function() {
      return this.renderer.render(this.scene, this.camera);
    };

    return PuppetHead;

  })();

  window.PuppetApplication = PuppetApplication;

}).call(this);
